const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');
const config = require('./config.json');
const davinci = require('./mods/davinci');
const axios = require('axios');
const maxCharacterLimit = 8700;
const allowedFileExtensions = ['log', 'txt', 'json', 'properties', 'yml'];
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
    ],
});

let waitingForContinuation = new Map(); // –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
let remainingResponses = new Map(); // –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –æ—Ç–≤–µ—Ç–∞–º–∏

client.once('ready', () => {
    console.log(`Bot has started as ${client.user.tag}.`);
    client.user.setActivity(config.status);
});


client.on('messageCreate', async (message) => {

    if (message.author.bot) return;

    if (message.channel.id === config.channelId) {
        try {
            let input = message.content;
            let fileDescription = '';
            const userMention = `<@${message.author.id}>`;
            const userQuestion = input.slice(0, 200);

            if (message.attachments.size > 0) {
                const attachment = message.attachments.first();
                const fileExtension = attachment.name.split('.').pop().toLowerCase();

                if (allowedFileExtensions.includes(fileExtension)) {
                    const attachmentBuffer = await axios.get(attachment.url, { responseType: 'arraybuffer' });
                    const attachmentContent = attachmentBuffer.data.toString();

                    fileDescription = `üìé **–ö —Å–æ–æ–±—â–µ–Ω–∏—é gpt —Ç–∞–∫–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª.**\n\n`;
                    input += '\n\n' + attachmentContent;
                }
            }

            const reactionEmoji = message.guild.emojis.cache.find(
                (emoji) => emoji.name === config.yourReactionEmoji
            );

            if (reactionEmoji) {
                await message.react(reactionEmoji);
            }
            message.channel.sendTyping();
            const typingInterval = setInterval(() => {
                message.channel.sendTyping();
            }, 7000);

            const response = await davinci.generateResponse(input);

            clearInterval(typingInterval);

            const maxMessageLength = 4096;
            const embedDescriptionLength = `**‚ùî –í–æ–ø—Ä–æ—Å –æ—Ç ${userMention}:**\n\n${userQuestion}\n\n${fileDescription}**üí° –û—Ç–≤–µ—Ç:**\n\n`.length;
            const maxResponseLength = maxMessageLength - embedDescriptionLength;

            if (response.length <= maxResponseLength) {
                const embed = new EmbedBuilder()
                    .setColor(0x00ff00)
                    .setTitle('üü¢ BM gpt üü¢')
                    .setDescription(`**‚ùî –í–æ–ø—Ä–æ—Å –æ—Ç ${userMention}:**\n\n${userQuestion}\n\n${fileDescription}**üí° –û—Ç–≤–µ—Ç:**\n${response}\n`)
                    .setFooter({ text: '–°–¥–µ–ª–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é' });

                const replyMessage = await message.reply({ embeds: [embed] });

            } else {
                let remainingResponse = response;
                while (remainingResponse.length > 0) {
                    let currentResponse = remainingResponse.slice(0, maxResponseLength);
                    remainingResponse = remainingResponse.slice(maxResponseLength);

                    const embed = new EmbedBuilder()
                        .setColor(0x00ff00)
                        .setTitle('üü¢ BM gpt üü¢')
                        .setDescription(currentResponse)
                        .setFooter({ text: '–°–¥–µ–ª–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é' });

                    const replyMessage = await message.reply({ embeds: [embed] });
                }
            }
        } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            console.error('Failed to generate response:', error);
            let errorMessage;

            if (error.code === 502) {
                await message.react('‚ùå');
                errorMessage = `–ö–∞–∂–µ—Ç—Å—è, –ì–ü–¢ —É—Å—Ç—Ä–æ–∏–ª–æ –∑–∞–±–∞—Å—Ç–æ–≤–∫—É –∏ –æ—Ç–∫–∞–∑–∞–ª–æ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å. –ò–º –Ω—É–∂–µ–Ω –ø–µ—Ä–µ—Ä—ã–≤, —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–∏ –æ—à–∏–±–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –æ–Ω–∏ —Ä–∞–∑–±–µ—Ä—É—Ç—Å—è. \n\n –ö–æ–¥ –æ—à–∏–±–∫–∏: **502**`;
            } else if (error.code === 504) {
                await message.react('‚ùå');
                errorMessage = `–ö–∞–∂–µ—Ç—Å—è, –ì–ü–¢ —Ä–µ—à–∏–ª–æ –≤–∑—è—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å. –û–Ω–∏ —Å–∫–∞–∑–∞–ª–∏, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç –Ω–∏—Ö –∑–∞—Ç–µ—Ä—è–ª—Å—è –≥–¥–µ-—Ç–æ –≤ –∫–æ—Å–º–æ—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ª–æ–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. \n\n –ö–æ–¥ –æ—à–∏–±–∫–∏: **504**`;
            } else if (error.code === 404) {
                await message.react('‚ùå');
                errorMessage = `–û–π, —è –∑–∞–±–ª—É–¥–∏–ª—Å—è –∏ –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —è –Ω–∞–∂–∞–ª –Ω–µ —Ç—É –∫–Ω–æ–ø–∫—É –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–ª —Å–≤–æ–∏ –∫–∏–±–µ—Ä–æ—á–∫–∏? –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –∏–ª–∏ –¥–∞–π—Ç–µ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –≤–∞–º –ø–æ–º–æ—á—å. \n\n –ö–æ–¥ –æ—à–∏–±–∫–∏: **404**`;
            } else if (error.code === 400) {
                await message.react('‚ùå');
                errorMessage = `–û—Ö, —è —Å–ª–æ–º–∞–ª –Ω–µ–º–Ω–æ–≥–æ —Å–≤–æ—é –∫–∏–±–µ—Ä–Ω–µ—Ç–∏—á–µ—Å–∫—É—é –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏ –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–Ω–∞—á–µ –∏–ª–∏ –¥–∞—Ç—å –º–Ω–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ? \n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: **400**`;
            } else if (error.code === 503) {
                await message.react('‚ùå');
                errorMessage = `–ì–ü–¢ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –∏ –∏—Ö —Å–µ—Ä–≤–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–µ—Ä–µ–¥–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ —Å–∫—É—á–∞—é—Ç –ø–æ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –æ–±–µ—â–∞—é—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. \n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: **503**`;
            } else {
                errorMessage = `GPT –≤–µ—Ä–Ω—É–ª –Ω–µ–ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Å—é–¥–∞ –Ω–∞–ø–∏—Å–∞—Ç—å. –í –æ–±—â–µ–º, –ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. –ú–æ–∂–µ—Ç —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.`;

                await message.react('‚ùå');
            }

            const errorEmbed = new EmbedBuilder()
                .setColor(0xff0000)
                .setTitle('‚ùå –û—à–∏–±–∫–∞')
                .setDescription(errorMessage)
                .setFooter({ text: '–°–¥–µ–ª–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é' });

            await message.reply({ embeds: [errorEmbed] });
        }
    }

});

client.login(config.token);
